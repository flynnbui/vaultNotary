// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VaultNotary.Infrastructure.Data;

#nullable disable

namespace VaultNotary.Infrastructure.Migrations
{
    [DbContext(typeof(VaultNotaryDbContext))]
    partial class VaultNotaryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VaultNotary.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("business_name");

                    b.Property<string>("BusinessRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("business_registration_number");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("PassportId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("passport_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_customers_document_id");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_customers_full_name");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("document_type");

                    b.Property<string>("NotaryPublic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("notary_public");

                    b.Property<string>("Secretary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("secretary");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("transaction_code");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("ix_documents_created_date");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("ix_documents_document_type");

                    b.HasIndex("NotaryPublic")
                        .HasDatabaseName("ix_documents_notary_public");

                    b.HasIndex("Secretary")
                        .HasDatabaseName("ix_documents_secretary");

                    b.HasIndex("TransactionCode")
                        .IsUnique()
                        .HasDatabaseName("ix_documents_transaction_code");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.DocumentFile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("S3Bucket")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("s3_bucket");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("s3_key");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_document_files");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_document_files_document_id");

                    b.ToTable("document_files", (string)null);
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.PartyDocumentLink", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("NotaryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("notary_date");

                    b.Property<string>("PartyRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("party_role");

                    b.Property<string>("SignatureStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signature_status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("DocumentId", "CustomerId")
                        .HasName("pk_party_document_links");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_party_document_links_customer_id");

                    b.ToTable("party_document_links", (string)null);
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.DocumentFile", b =>
                {
                    b.HasOne("VaultNotary.Domain.Entities.Document", "Document")
                        .WithMany("Files")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_files_documents_document_id");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.PartyDocumentLink", b =>
                {
                    b.HasOne("VaultNotary.Domain.Entities.Customer", "Customer")
                        .WithMany("PartyDocumentLinks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_party_document_links_customers_customer_id");

                    b.HasOne("VaultNotary.Domain.Entities.Document", "Document")
                        .WithMany("PartyDocumentLinks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_party_document_links_documents_document_id");

                    b.Navigation("Customer");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.Customer", b =>
                {
                    b.Navigation("PartyDocumentLinks");
                });

            modelBuilder.Entity("VaultNotary.Domain.Entities.Document", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("PartyDocumentLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
