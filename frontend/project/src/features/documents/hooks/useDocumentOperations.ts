import { useCallback, useState } from 'react';
import { toast } from 'sonner';

import { DocumentType, DialogMode } from '../types/document.types';
import useDocumentApiService from '../services/documentApiService';

interface UseDocumentOperationsProps {
  onEdit?: (document: DocumentType, mode: DialogMode) => void;
  onView?: (document: DocumentType, mode: DialogMode) => void;
  onUpload?: (document: DocumentType, mode: DialogMode) => void;
  onRefresh?: () => void;
}

export const useDocumentOperations = ({
  onEdit,
  onView,
  onUpload,
  onRefresh
}: UseDocumentOperationsProps) => {
  const [loading, setLoading] = useState(false);
  const { deleteDocument, getDocumentWithPopulatedParties } = useDocumentApiService();

  const handleEditDocument = useCallback(async (document: DocumentType) => {
    try {
      setLoading(true);
      console.log("üîÑ Loading document with populated parties for edit:", document.id);
      
      const populatedDocument = await getDocumentWithPopulatedParties(document.id);
      if (!populatedDocument) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªì s∆°');
      }
      onEdit?.(populatedDocument, 'edit');
    } catch (error) {
      console.error("Error loading document for edit:", error);
      toast.error("C√≥ l·ªói khi t·∫£i th√¥ng tin h·ªì s∆°");
    } finally {
      setLoading(false);
    }
  }, [getDocumentWithPopulatedParties, onEdit]);

  const handleViewDocument = useCallback(async (document: DocumentType) => {
    try {
      setLoading(true);
      console.log("üîÑ Loading document with populated parties for view:", document.id);
      
      const populatedDocument = await getDocumentWithPopulatedParties(document.id);
      if (!populatedDocument) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªì s∆°');
      }
      onView?.(populatedDocument, 'view');
    } catch (error) {
      console.error("Error loading document for view:", error);
      toast.error("C√≥ l·ªói khi t·∫£i th√¥ng tin h·ªì s∆°");
    } finally {
      setLoading(false);
    }
  }, [getDocumentWithPopulatedParties, onView]);

  const handleUploadDocument = useCallback((document: DocumentType) => {
    onUpload?.(document, 'upload');
  }, [onUpload]);

  const handleDeleteDocument = useCallback(async (id: string) => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªì s∆° n√†y?")) {
      return;
    }

    try {
      setLoading(true);
      const success = await deleteDocument(id);
      
      if (success) {
        toast.success("ƒê√£ x√≥a h·ªì s∆° th√†nh c√¥ng!");
        onRefresh?.();
      }
    } catch (error) {
      console.error("Error deleting document:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi x√≥a h·ªì s∆°");
    } finally {
      setLoading(false);
    }
  }, [deleteDocument, onRefresh]);

  const handleCopyDocument = useCallback(async (document: DocumentType) => {
    try {
      // For copying, we'll trigger create mode and let the form handle the data copying
      toast.success("ƒê√£ sao ch√©p h·ªì s∆°. Vui l√≤ng ch·ªânh s·ª≠a th√¥ng tin c·∫ßn thi·∫øt.");
      onEdit?.(document, 'create');
    } catch (error) {
      console.error("Error copying document:", error);
      toast.error("C√≥ l·ªói khi sao ch√©p h·ªì s∆°");
    }
  }, [onEdit]);

  return {
    handleEditDocument,
    handleViewDocument,
    handleUploadDocument,
    handleDeleteDocument,
    handleCopyDocument,
    loading
  };
};