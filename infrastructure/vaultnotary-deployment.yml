AWSTemplateFormatVersion: '2010-09-09'
Description: 'VaultNotary Simplified Infrastructure - S3, RDS PostgreSQL, and IAM resources'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming
  
  S3BucketName:
    Type: String
    Default: vaultnotary-files
    Description: Name for the S3 bucket (must be globally unique)
    
  DatabaseName:
    Type: String
    Default: vaultnotary
    Description: Name for the PostgreSQL database
    
  DatabaseUsername:
    Type: String
    Default: vaultnotary_user
    Description: Username for the PostgreSQL database
    
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Password for the PostgreSQL database
    MinLength: 8
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where resources will be created
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for RDS (minimum 2 subnets in different AZs)

Resources:
  # ==========================================
  # KMS KEY FOR S3 ENCRYPTION
  # ==========================================
  VaultNotaryS3KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'VaultNotary S3 Encryption Key'
      KeyPolicy:
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow S3 Service
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  VaultNotaryS3KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/vaultnotary-s3-${Environment}'
      TargetKeyId: !Ref VaultNotaryS3KMSKey

  # ==========================================
  # S3 BUCKET FOR FILE STORAGE
  # ==========================================
  VaultNotaryS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketName}-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref VaultNotaryS3KMSKey
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # ==========================================
  # RDS POSTGRESQL DATABASE
  # ==========================================
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for VaultNotary PostgreSQL database'
      SubnetIds: !Ref SubnetIds
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: VaultNotary

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for VaultNotary PostgreSQL database'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/8
          Description: 'PostgreSQL access from VPC'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: VaultNotary

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for VaultNotary application'
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access for AWS services'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: VaultNotary

  VaultNotaryDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'vaultnotary-db-${Environment}'
      DBName: !Ref DatabaseName
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.8'
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      DeletionProtection: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: VaultNotary
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  # ==========================================
  # IAM POLICIES
  # ==========================================
  VaultNotaryS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'VaultNotaryS3Policy-${Environment}'
      Description: 'Policy for VaultNotary S3 access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: S3BucketAccess
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetObjectVersion
              - s3:GetBucketLocation
              - s3:GetBucketVersioning
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:ListBucketMultipartUploads
            Resource:
              - !GetAtt VaultNotaryS3Bucket.Arn
              - !Sub '${VaultNotaryS3Bucket.Arn}/*'

  VaultNotaryKMSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'VaultNotaryKMSPolicy-${Environment}'
      Description: 'Policy for VaultNotary KMS access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: KMSAccess
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource:
              - !GetAtt VaultNotaryS3KMSKey.Arn

  VaultNotaryCloudWatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'VaultNotaryCloudWatchPolicy-${Environment}'
      Description: 'Policy for VaultNotary CloudWatch access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudWatchLogs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vaultnotary/*'

  # ==========================================
  # IAM USER FOR APPLICATION
  # ==========================================
  VaultNotaryAppUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub 'vaultnotary-app-user-${Environment}'
      ManagedPolicyArns:
        - !Ref VaultNotaryS3Policy
        - !Ref VaultNotaryKMSPolicy
        - !Ref VaultNotaryCloudWatchPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: VaultNotary
        - Key: Purpose
          Value: Application

  # ==========================================
  # CLOUDWATCH LOG GROUPS
  # ==========================================
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vaultnotary/app-${Environment}'
      RetentionInDays: 30

# ==========================================
# OUTPUTS
# ==========================================
Outputs:
  # S3 Outputs
  S3BucketName:
    Description: 'Name of the S3 bucket for file storage'
    Value: !Ref VaultNotaryS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  S3BucketArn:
    Description: 'ARN of the S3 bucket'
    Value: !GetAtt VaultNotaryS3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'

  # Database Outputs
  DatabaseEndpoint:
    Description: 'RDS PostgreSQL endpoint'
    Value: !GetAtt VaultNotaryDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  DatabasePort:
    Description: 'RDS PostgreSQL port'
    Value: !GetAtt VaultNotaryDatabase.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-DatabasePort'

  DatabaseName:
    Description: 'PostgreSQL database name'
    Value: !Ref DatabaseName
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseName'

  # KMS Outputs
  S3KMSKeyId:
    Description: 'KMS Key ID for S3 encryption'
    Value: !Ref VaultNotaryS3KMSKey
    Export:
      Name: !Sub '${AWS::StackName}-S3KMSKey'

  S3KMSKeyAlias:
    Description: 'KMS Key Alias for S3 encryption'
    Value: !Ref VaultNotaryS3KMSKeyAlias
    Export:
      Name: !Sub '${AWS::StackName}-S3KMSKeyAlias'

  # IAM Outputs
  AppUserName:
    Description: 'IAM username for application'
    Value: !Ref VaultNotaryAppUser
    Export:
      Name: !Sub '${AWS::StackName}-AppUser'

  AppUserArn:
    Description: 'ARN of the application IAM user'
    Value: !GetAtt VaultNotaryAppUser.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AppUserArn'

  # Security Group Output
  ApplicationSecurityGroupId:
    Description: 'Security group ID for the application'
    Value: !Ref ApplicationSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationSecurityGroup'

  # CloudWatch Outputs
  AppLogGroupName:
    Description: 'CloudWatch Log Group for application'
    Value: !Ref AppLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-AppLogGroup'

  # Configuration Template for appsettings.json
  ConfigurationTemplate:
    Description: 'Template configuration for appsettings.json'
    Value: !Sub |
      {
        "ConnectionStrings": {
          "DefaultConnection": "Host=${VaultNotaryDatabase.Endpoint.Address};Port=${VaultNotaryDatabase.Endpoint.Port};Database=${DatabaseName};Username=${DatabaseUsername};Password=REPLACE_WITH_DATABASE_PASSWORD",
          "RabbitMQ": "amqp://admin:password@localhost:5672"
        },
        "Aws": {
          "Region": "${AWS::Region}",
          "AccessKey": "REPLACE_WITH_ACCESS_KEY",
          "SecretKey": "REPLACE_WITH_SECRET_KEY",
          "S3": {
            "BucketName": "${VaultNotaryS3Bucket}",
            "FileKeyPrefix": "files/",
            "PresignedUrlExpirationHours": 24
          },
          "Kms": {
            "SymmetricKeyId": "${VaultNotaryS3KMSKey}"
          }
        }
      }

  # Manual Steps Required
  ManualStepsRequired:
    Description: 'Instructions for manual steps'
    Value: !Sub |
      MANUAL STEPS REQUIRED:
      1. Create access keys for user: ${VaultNotaryAppUser}
      2. Update appsettings.json with the configuration template above
      3. Replace REPLACE_WITH_ACCESS_KEY and REPLACE_WITH_SECRET_KEY with actual values
      4. Replace REPLACE_WITH_DATABASE_PASSWORD with the actual database password
      5. Run database migrations against the PostgreSQL database
      6. Test the application connectivity